{
  "name": "com.unity.transport",
  "displayName": "Unity Transport",
  "version": "2.5.0",
  "unity": "2022.3",
  "description": "Unity network transport layer - the low-level interface for connecting and sending data through a network",
  "dependencies": {
    "com.unity.collections": "2.2.1",
    "com.unity.burst": "1.8.12",
    "com.unity.mathematics": "1.3.1"
  },
  "relatedPackages": {
    "com.unity.transport.tests": "0.0.0"
  },
  "_upm": {
    "changelog": "### New Features\n\n* Added: Added Path MTU discovery support to adjust the maximum packet size for each connection dynamically. The discovered MTU for a client can be queried with `NetworkDriver.GetMaxSupportedMessageSize(connection)`. This value is established as part of the connection handshake and doesn't get recalculated over the lifetime of the connection. This value will also not exceed the NetworkConfig's `MaxMessageSize` value. This value is additionally available to pipelines via `NetworkPipelineContext.maxMessageSize`.\n\n### Fixes\n\n* Fixed an issue where `NetworkEndpoint.SetRawAddressBytes` would use the wrong number of bytes from the provided buffer.\n* Fixed an issue where WebSocket connections would be refused if the client sent large headers (e.g. large cookies).\n* Fixed a WebSocket problem where the send queue could \"leak\" packets if connections with pending sends were closed. This could eventually cause all sends to fail with the -5 error code (`NetworkSendQueueFull`).\n* Fixed a possible `IndexOutOfRangeException` when using WebSockets and the connection would fail to be established at the TCP level.\n* Fixed a memory leak in the hostname resolution process"
  },
  "upmCi": {
    "footprint": "e093c6f1fce703b0dfe4185989cb74ad27921cc1"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.transport@2.5/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.transport.git",
    "type": "git",
    "revision": "93bd0ea88912e8f01d6d20c672afe55dffeac3b0"
  },
  "samples": [
    {
      "displayName": "Cross-play Example",
      "description": "Example of how to use MultiNetworkDriver to create a server that accepts both UDP and WebSocket connections.",
      "path": "Samples~/CrossPlay"
    },
    {
      "displayName": "Jobified Client and Server",
      "description": "Very simple client and server implementations using jobs. Meant to tie in with the package documentation.",
      "path": "Samples~/JobifiedClientServer"
    },
    {
      "displayName": "Ping Sample",
      "description": "Small application to compute round-trip time (ping) between client and server.",
      "path": "Samples~/Ping"
    },
    {
      "displayName": "Ping Sample (with Relay)",
      "description": "Small application to compute round-trip time (ping) between client and host, using Unity Relay.",
      "path": "Samples~/RelayPing"
    },
    {
      "displayName": "Simple Client and Server",
      "description": "Simplest possible client and server implementations. Meant to tie in with the package documentation.",
      "path": "Samples~/SimpleClientServer"
    }
  ]
}
